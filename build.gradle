plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
}

group = 'kr.lnsc'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = '0.8.10'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // DB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.google.guava:guava:32.1.2-jre'

    // Memcached Cache
    implementation 'com.google.code.simple-spring-memcached:spring-cache:4.1.3'
    implementation 'com.google.code.simple-spring-memcached:simple-spring-memcached:4.1.3'
    implementation 'com.google.code.simple-spring-memcached:xmemcached-provider:4.1.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:5.3.1'

    // Log
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    // TestContainer
    testImplementation 'org.testcontainers:mysql:1.19.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

def profile = project.hasProperty("profile") ? project.property("profile").toString() : "dev"

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources", "src/main/resources-${profile}"]
        }
    }
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = false
        csv.required = false

        html.outputLocation = layout.buildDirectory.dir('jacoco/html')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = "METHOD"
                value = "COVEREDRATIO"
                minimum = 0.90
            }

            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.80
            }
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}